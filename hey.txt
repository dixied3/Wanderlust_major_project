// package.json
{
  "name": "mini-url-shortener",
  "version": "1.0.0",
  "description": "A simple URL shortener API built with Express.js and MongoDB",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "express-rate-limit": "^6.10.0",
    "validator": "^13.11.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "keywords": ["url-shortener", "api", "express", "mongodb"],
  "author": "Your Name",
  "license": "MIT"
}

// server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const urlRoutes = require('./routes/urlRoutes');
const { errorHandler } = require('./middleware/errorHandler');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: {
    error: 'Too many requests from this IP, please try again later.'
  }
});

app.use('/api/', limiter);

// Routes
app.use('/api', urlRoutes);
app.use('/', urlRoutes); // For redirect functionality

// Error handling middleware
app.use(errorHandler);

// Database connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/url-shortener', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected successfully'))
.catch(err => console.error('MongoDB connection error:', err));

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = app;

// models/Url.js
const mongoose = require('mongoose');

const urlSchema = new mongoose.Schema({
  originalUrl: {
    type: String,
    required: true,
    validate: {
      validator: function(v) {
        return /^https?:\/\/.+/.test(v);
      },
      message: 'Please provide a valid URL'
    }
  },
  shortCode: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  clicks: {
    type: Number,
    default: 0
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  expiresAt: {
    type: Date,
    default: function() {
      return new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days
    }
  }
});

// Index for cleanup of expired URLs
urlSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

module.exports = mongoose.model('Url', urlSchema);

// routes/urlRoutes.js
const express = require('express');
const { shortenUrl, redirectUrl, getUrlStats } = require('../controllers/urlController');
const { validateUrl } = require('../middleware/validation');

const router = express.Router();

// POST /api/shorten - Create short URL
router.post('/shorten', validateUrl, shortenUrl);

// GET /api/stats/:code - Get URL statistics
router.get('/stats/:code', getUrlStats);

// GET /:code - Redirect to original URL
router.get('/:code', redirectUrl);

module.exports = router;

// controllers/urlController.js
const Url = require('../models/Url');
const { generateShortCode } = require('../utils/helpers');

// Create short URL
const shortenUrl = async (req, res) => {
  try {
    const { url } = req.body;
    
    // Check if URL already exists
    let existingUrl = await Url.findOne({ originalUrl: url });
    
    if (existingUrl && existingUrl.expiresAt > new Date()) {
      return res.json({
        shortUrl: `${req.protocol}://${req.get('host')}/${existingUrl.shortCode}`,
        shortCode: existingUrl.shortCode,
        originalUrl: existingUrl.originalUrl,
        createdAt: existingUrl.createdAt,
        expiresAt: existingUrl.expiresAt
      });
    }
    
    // Generate unique short code
    let shortCode;
    let isUnique = false;
    
    while (!isUnique) {
      shortCode = generateShortCode();
      const existingCode = await Url.findOne({ shortCode });
      if (!existingCode) {
        isUnique = true;
      }
    }
    
    // Create new URL entry
    const newUrl = new Url({
      originalUrl: url,
      shortCode
    });
    
    await newUrl.save();
    
    res.status(201).json({
      shortUrl: `${req.protocol}://${req.get('host')}/${shortCode}`,
      shortCode,
      originalUrl: url,
      createdAt: newUrl.createdAt,
      expiresAt: newUrl.expiresAt
    });
    
  } catch (error) {
    console.error('Error creating short URL:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Redirect to original URL
const redirectUrl = async (req, res) => {
  try {
    const { code } = req.params;
    
    const url = await Url.findOne({ shortCode: code });
    
    if (!url) {
      return res.status(404).json({ error: 'Short URL not found' });
    }
    
    // Check if URL has expired
    if (url.expiresAt < new Date()) {
      return res.status(410).json({ error: 'Short URL has expired' });
    }
    
    // Increment click count
    url.clicks += 1;
    await url.save();
    
    // Redirect to original URL
    res.redirect(url.originalUrl);
    
  } catch (error) {
    console.error('Error redirecting:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Get URL statistics
const getUrlStats = async (req, res) => {
  try {
    const { code } = req.params;
    
    const url = await Url.findOne({ shortCode: code });
    
    if (!url) {
      return res.status(404).json({ error: 'Short URL not found' });
    }
    
    res.json({
      shortCode: url.shortCode,
      originalUrl: url.originalUrl,
      clicks: url.clicks,
      createdAt: url.createdAt,
      expiresAt: url.expiresAt,
      isExpired: url.expiresAt < new Date()
    });
    
  } catch (error) {
    console.error('Error getting stats:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

module.exports = {
  shortenUrl,
  redirectUrl,
  getUrlStats
};

// middleware/validation.js
const validator = require('validator');

const validateUrl = (req, res, next) => {
  const { url } = req.body;
  
  if (!url) {
    return res.status(400).json({ error: 'URL is required' });
  }
  
  if (!validator.isURL(url, { protocols: ['http', 'https'] })) {
    return res.status(400).json({ error: 'Please provide a valid URL' });
  }
  
  next();
};

module.exports = {
  validateUrl
};

// middleware/errorHandler.js
const errorHandler = (err, req, res, next) => {
  console.error('Error:', err);
  
  if (err.name === 'ValidationError') {
    return res.status(400).json({
      error: 'Validation error',
      details: err.message
    });
  }
  
  if (err.code === 11000) {
    return res.status(409).json({
      error: 'Duplicate entry',
      details: 'Short code already exists'
    });
  }
  
  res.status(500).json({
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
};

module.exports = {
  errorHandler
};

// utils/helpers.js
const generateShortCode = (length = 6) => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return result;
};

module.exports = {
  generateShortCode
};

// .env
NODE_ENV=development
PORT=3000
MONGODB_URI=mongodb://localhost:27017/url-shortener

// .gitignore
node_modules/
.env
.DS_Store
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
coverage/
.nyc_output
.tmp/
.cache/

// tests/url.test.js
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../server');
const Url = require('../models/Url');

describe('URL Shortener API', () => {
  beforeAll(async () => {
    await mongoose.connect('mongodb://localhost:27017/url-shortener-test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });

  afterAll(async () => {
    await mongoose.connection.close();
  });

  beforeEach(async () => {
    await Url.deleteMany({});
  });

  describe('POST /api/shorten', () => {
    it('should create a short URL', async () => {
      const response = await request(app)
        .post('/api/shorten')
        .send({ url: 'https://example.com' })
        .expect(201);

      expect(response.body).toHaveProperty('shortUrl');
      expect(response.body).toHaveProperty('shortCode');
      expect(response.body.originalUrl).toBe('https://example.com');
    });

    it('should return 400 for invalid URL', async () => {
      const response = await request(app)
        .post('/api/shorten')
        .send({ url: 'invalid-url' })
        .expect(400);

      expect(response.body).toHaveProperty('error');
    });

    it('should return existing short URL for duplicate', async () => {
      const url = 'https://example.com';
      
      const response1 = await request(app)
        .post('/api/shorten')
        .send({ url })
        .expect(201);

      const response2 = await request(app)
        .post('/api/shorten')
        .send({ url })
        .expect(200);

      expect(response1.body.shortCode).toBe(response2.body.shortCode);
    });
  });

  describe('GET /:code', () => {
    it('should redirect to original URL', async () => {
      const url = new Url({
        originalUrl: 'https://example.com',
        shortCode: 'test123'
      });
      await url.save();

      await request(app)
        .get('/test123')
        .expect(302);
    });

    it('should return 404 for non-existent code', async () => {
      await request(app)
        .get('/nonexistent')
        .expect(404);
    });
  });

  describe('GET /api/stats/:code', () => {
    it('should return URL statistics', async () => {
      const url = new Url({
        originalUrl: 'https://example.com',
        shortCode: 'test123',
        clicks: 5
      });
      await url.save();

      const response = await request(app)
        .get('/api/stats/test123')
        .expect(200);

      expect(response.body.clicks).toBe(5);
      expect(response.body.originalUrl).toBe('https://example.com');
    });
  });
});

// README.md
# Mini URL Shortener API

A simple and efficient URL shortener API built with Node.js, Express.js, and MongoDB.

## Features

- ✅ Shorten long URLs with custom short codes
- ✅ Redirect functionality using short codes
- ✅ URL validation and error handling
- ✅ Click tracking and analytics
- ✅ Rate limiting for API protection
- ✅ URL expiration (30 days default)
- ✅ Duplicate URL handling
- ✅ Comprehensive test suite

## Tech Stack

- **Runtime**: Node.js
- **Framework**: Express.js
- **Database**: MongoDB with Mongoose
- **Validation**: Validator.js
- **Rate Limiting**: express-rate-limit
- **Testing**: Jest & Supertest

## Setup Instructions

### Prerequisites

- Node.js (v14 or higher)
- MongoDB (running locally or MongoDB Atlas)
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd mini-url-shortener
```

2. Install dependencies:
```bash
npm install
```

3. Create a `.env` file in the root directory:
```env
NODE_ENV=development
PORT=3000
MONGODB_URI=mongodb://localhost:27017/url-shortener
```

4. Start MongoDB service (if running locally):
```bash
mongod
```

5. Run the application:
```bash
# Development mode with nodemon
npm run dev

# Production mode
npm start
```

## API Endpoints

### 1. Shorten URL
**POST** `/api/shorten`

**Request Body:**
```json
{
  "url": "https://example.com/some/very/long/link"
}
```

**Response:**
```json
{
  "shortUrl": "http://localhost:3000/abc123",
  "shortCode": "abc123",
  "originalUrl": "https://example.com/some/very/long/link",
  "createdAt": "2023-01-01T00:00:00.000Z",
  "expiresAt": "2023-01-31T00:00:00.000Z"
}
```

### 2. Redirect to Original URL
**GET** `/:code`

Redirects to the original URL associated with the short code.

### 3. Get URL Statistics
**GET** `/api/stats/:code`

**Response:**
```json
{
  "shortCode": "abc123",
  "originalUrl": "https://example.com/some/very/long/link",
  "clicks": 42,
  "createdAt": "2023-01-01T00:00:00.000Z",
  "expiresAt": "2023-01-31T00:00:00.000Z",
  "isExpired": false
}
```

## Testing

Run the test suite:
```bash
npm test
```

## Testing with cURL

### Create a short URL:
```bash
curl -X POST http://localhost:3000/api/shorten \
  -H "Content-Type: application/json" \
  -d '{"url": "https://github.com"}'
```

### Get URL statistics:
```bash
curl http://localhost:3000/api/stats/abc123
```

### Test redirect:
```bash
curl -I http://localhost:3000/abc123
```

## Database Schema

### URL Document Structure
```javascript
{
  originalUrl: String,      // The original long URL
  shortCode: String,        // Generated short code (unique)
  clicks: Number,           // Number of times accessed
  createdAt: Date,          // Creation timestamp
  expiresAt: Date          // Expiration timestamp (30 days default)
}
```

## Rate Limiting

- **Limit**: 100 requests per 15 minutes per IP
- **Scope**: Applied to all `/api/` routes
- **Response**: 429 status code when limit exceeded

## Error Handling

### Common Error Responses

- **400 Bad Request**: Invalid URL format
- **404 Not Found**: Short code doesn't exist
- **409 Conflict**: Duplicate short code
- **410 Gone**: URL has expired
- **429 Too Many Requests**: Rate limit exceeded
- **500 Internal Server Error**: Server error

## Project Structure

```
mini-url-shortener/
├── controllers/
│   └── urlController.js
├── middleware/
│   ├── errorHandler.js
│   └── validation.js
├── models/
│   └── Url.js
├── routes/
│   └── urlRoutes.js
├── tests/
│   └── url.test.js
├── utils/
│   └── helpers.js
├── .env
├── .gitignore
├── package.json
├── README.md
└── server.js
```

## Production Considerations

1. **Database**: Use MongoDB Atlas for production
2. **Environment Variables**: Use proper environment configuration
3. **Logging**: Implement structured logging (Winston, etc.)
4. **Monitoring**: Add health checks and monitoring
5. **Security**: Implement HTTPS and additional security headers
6. **Scaling**: Consider Redis for caching and session management

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## License

MIT License - see LICENSE file for details